(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{212:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"variable-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-handling","aria-hidden":"true"}},[t._v("#")]),t._v(" Variable Handling")]),t._v(" "),a("p",[t._v("When writing your PHP code you will find that very often you need to know if a variable exists, if it has been previously created or if the value inside a variable is empty.")]),t._v(" "),a("p",[t._v("Let's say we are going to build a log in page for our website. The user is supposed to fill in a form that has two different input fields - one called username and one called passwd. We want to make sure that the form is being submitted to us with both of those form fields, that the form was submitted using the POST method and that neither of those two fields were left blank.")]),t._v(" "),a("h2",{attrs:{id:"isset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isset","aria-hidden":"true"}},[t._v("#")]),t._v(" isset")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("isset()")]),t._v(" method checks to see if a variable exists. It could be a stand alone variable or it could be checking for a single item within an array.")]),t._v(" "),a("h2",{attrs:{id:"empty"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#empty","aria-hidden":"true"}},[t._v("#")]),t._v(" empty")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("empty()")]),t._v(" method checks to see if a string variable is null or an empty string.")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isset")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$_POST")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'username'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isset")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$_POST")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'passwd'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("empty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$_POST")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'username'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("empty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token variable"}},[t._v("$_POST")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token single-quoted-string string"}},[t._v("'passwd'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  "),a("span",{attrs:{class:"token comment"}},[t._v("//write the code here that handles the log in.")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("//write the code here to tell the user that they did not submit a proper form")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The double ampersands mean AND. We are testing to make sure that both "),a("code",[t._v("$_POST")]),t._v(" parameters exist AND that neither is empty.")]),t._v(" "),a("p",[t._v("While often the order in which we put the checks with "),a("code",[t._v("isset()")]),t._v(" or "),a("code",[t._v("empty()")]),t._v(" does not matter. However, in this case there was a purpose to the order. When you string together a series of tests with "),a("code",[t._v("&&")]),t._v(" it means that you need all of them to return true. As soon as one of them returns false the testing stops. They are read from left to right. If the first one fails then none of the other tests are required. In our code above we want to make sure that both "),a("code",[t._v("$_POST['username']")]),t._v(" and "),a("code",[t._v("$_POST['passwd']")]),t._v(" exist. If one of them does not exist within the "),a("code",[t._v("$_POST")]),t._v(" array then there is no point in checking to see if it is empty.")]),t._v(" "),a("h2",{attrs:{id:"is-null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-null","aria-hidden":"true"}},[t._v("#")]),t._v(" is_null")]),t._v(" "),a("h2",{attrs:{id:"is-int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-int","aria-hidden":"true"}},[t._v("#")]),t._v(" is_int")]),t._v(" "),a("h2",{attrs:{id:"is-array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#is-array","aria-hidden":"true"}},[t._v("#")]),t._v(" is_array")])])}],!1,null,null,null);n.options.__file="variable-handling.md";s.default=n.exports}}]);